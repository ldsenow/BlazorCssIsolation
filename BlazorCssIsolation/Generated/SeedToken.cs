//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace BlazorCssIsolation.Tokens
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.8.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial record SeedToken
    {

        [System.Text.Json.Serialization.JsonPropertyName("blue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Blue { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("purple")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Purple { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("cyan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Cyan { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("green")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Green { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("magenta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Magenta { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("pink")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Pink { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("red")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Red { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("orange")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Orange { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("yellow")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Yellow { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("volcano")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Volcano { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("geekblue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Geekblue { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("lime")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Lime { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("gold")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string Gold { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("colorPrimary")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string ColorPrimary { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("colorSuccess")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string ColorSuccess { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("colorWarning")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string ColorWarning { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("colorError")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string ColorError { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("colorInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string ColorInfo { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("colorTextBase")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string ColorTextBase { get; set; }

        /// <summary>
        /// Base component background color. Will derivative container background color with this
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("colorBgBase")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string ColorBgBase { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("fontFamily")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string FontFamily { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("fontSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double FontSize { get; set; }

        /// <summary>
        /// Border width of base components
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lineWidth")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double LineWidth { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("lineType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string LineType { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double MotionUnit { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionBase")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double MotionBase { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionEaseOutCirc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string MotionEaseOutCirc { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionEaseInOutCirc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string MotionEaseInOutCirc { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionEaseInOut")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string MotionEaseInOut { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionEaseOutBack")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string MotionEaseOutBack { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionEaseInBack")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string MotionEaseInBack { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionEaseInQuint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string MotionEaseInQuint { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionEaseOutQuint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string MotionEaseOutQuint { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("motionEaseOut")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public string MotionEaseOut { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("borderRadius")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double BorderRadius { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("sizeUnit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double SizeUnit { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("sizeStep")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double SizeStep { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("sizePopupArrow")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double SizePopupArrow { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("controlHeight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double ControlHeight { get; set; }

        /// <summary>
        /// Base zIndex of component like BackTop, Affix which can be cover by large popup
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zIndexBase")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double ZIndexBase { get; set; }

        /// <summary>
        /// Base popup component zIndex
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zIndexPopupBase")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double ZIndexPopupBase { get; set; }

        /// <summary>
        /// Define default Image opacity. Useful when in dark-like theme
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("opacityImage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public double OpacityImage { get; set; }


        [System.Text.Json.Serialization.JsonPropertyName("wireframe")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public bool Wireframe { get; set; }


    }
}